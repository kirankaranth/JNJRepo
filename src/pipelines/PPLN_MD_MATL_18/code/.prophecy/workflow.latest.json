{
      "metainfo" : {
        "id" : "1",
        "language" : "python",
        "fabricId" : "32",
        "frontEndLanguage" : "sql",
        "mode" : "batch",
        "udfs" : {
          "language" : "python",
          "udfs" : [ ]
        },
        "udafs" : {
          "language" : "python",
          "code" : ""
        },
        "configuration" : {
          "common" : {
            "type" : "record",
            "fields" : [ {
              "name" : "targetSchema",
              "kind" : {
                "type" : "string",
                "value" : "l1_md_prophecy"
              },
              "optional" : false
            }, {
              "name" : "sourceSystem",
              "kind" : {
                "type" : "string",
                "value" : "mbp"
              },
              "optional" : false
            }, {
              "name" : "sourceDatabase",
              "kind" : {
                "type" : "string",
                "value" : "mbp"
              },
              "optional" : false
            } ]
          },
          "oldCommon" : {
            "type" : "record",
            "fields" : [ ]
          },
          "fabrics" : { },
          "instances" : { },
          "selected" : "default",
          "nonEditable" : [ ],
          "isSubscribedPipelineWithPipelineConfigs" : false
        },
        "sparkConf" : [ ],
        "hadoopConf" : [ ],
        "codeMode" : "sparse",
        "buildSystem" : "maven",
        "externalDependencies" : [ ],
        "isImported" : false,
        "interimMode" : "Full",
        "interimModeEnabled" : true,
        "visualCodeInterimMode" : "Disabled",
        "recordsLimit" : {
          "enabled" : false,
          "value" : 1000
        },
        "topLevelPackage" : "PPLN_MD_MATL_18"
      },
      "connections" : [ {
        "id" : "0add02d4-4f7c-4406-846a-9e6db7022f08",
        "source" : "4daa2f90-7aa9-48be-a0b3-ab6863fd8d1f",
        "sourcePort" : "56a9028c-d50d-485b-a4ea-683b8f48db87",
        "target" : "52802fd2-4803-4b3e-8d8e-03ea9da16be4",
        "targetPort" : "8f11ac62-d134-42be-9734-e16837036e3e"
      }, {
        "id" : "6fe28599-a9a5-4b32-b182-4244fa011fc6",
        "source" : "1541df25-6375-4f1b-8485-193680a84bbf",
        "sourcePort" : "0177e8d5-dda5-42e3-bfed-de931297c165",
        "target" : "4daa2f90-7aa9-48be-a0b3-ab6863fd8d1f",
        "targetPort" : "31637db1-04fb-4b33-a44a-8ba0472b4735"
      } ],
      "processes" : {
        "52802fd2-4803-4b3e-8d8e-03ea9da16be4" : {
          "id" : "52802fd2-4803-4b3e-8d8e-03ea9da16be4",
          "component" : "Target",
          "metadata" : {
            "label" : "MD_MATL",
            "slug" : "MD_MATL",
            "x" : -540,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "8f11ac62-d134-42be-9734-e16837036e3e",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "datasetId" : "datasets/MD_MATL"
          }
        },
        "4daa2f90-7aa9-48be-a0b3-ab6863fd8d1f" : {
          "id" : "4daa2f90-7aa9-48be-a0b3-ab6863fd8d1f",
          "component" : "SchemaTransform",
          "metadata" : {
            "label" : "addL1fields",
            "slug" : "addL1fields",
            "x" : -780,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "31637db1-04fb-4b33-a44a-8ba0472b4735",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ {
              "id" : "56a9028c-d50d-485b-a4ea-683b8f48db87",
              "slug" : "out",
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "transformations" : [ {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "SRC_SYS_CD",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'$sourceSystem'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'MATL_NUM',MATL_NUM,'SHRT_MATL_NUM',SHRT_MATL_NUM))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_md5_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "md5(to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'MATL_NUM',MATL_NUM,'SHRT_MATL_NUM',SHRT_MATL_NUM)))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_l1_upt_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            } ]
          }
        },
        "1541df25-6375-4f1b-8485-193680a84bbf" : {
          "id" : "1541df25-6375-4f1b-8485-193680a84bbf",
          "component" : "Script",
          "metadata" : {
            "label" : "sql_MD_MATL",
            "slug" : "sql_MD_MATL",
            "x" : -1060,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "0177e8d5-dda5-42e3-bfed-de931297c165",
              "slug" : "out0",
              "schema" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "_deleted_",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  } 
                } ]
              },
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : true
          },
          "properties" : {
            "script" : "out0 = spark.sql(f\"\"\"\n    SELECT\n  '{Config.sourceSystem}'  AS SRC_SYS_CD,\n  MARA.matnr AS MATL_NUM,\n  TRIM(MARA.mtart) AS MATL_TYPE_CD,\n  NULL AS BRND_CD,\n  TRIM(MARA.spart) AS FRANCHISE_CD,\n  TRIM(MARA.labor) AS LCL_PLNG_SUB_FRAN_CD,\n  TRIM(MARA.ekwsl) AS PRCHSNG_VAL_KEY_CD,\n  TRIM(MARA.lvorm) AS DEL_IND,\n  TRIM(MARA.matkl) AS MATL_GRP_CD,\n  TRIM(MARA.mbrsh) AS INDSTR_SECTR_CD,\n  TRIM(MARA.meins) AS BASE_UOM_CD,\n  CAST(TRIM(MARA.mhdhb) AS DECIMAL(18, 4)) AS TOT_SHLF_LIF_DAYS_CNT,\n  CAST(TRIM(MARA.mhdrz) AS DECIMAL(18, 4)) AS MIN_SHLF_RMN_LIF_DAYS_CNT,\n  TRIM(MARA.mstae) AS MATL_STS_CD,\n  TRIM(MARA.mstav) AS DSTN_CHN_STS_CD,\n  CAST(TRIM(MARA.ntgew) AS DECIMAL(18, 4)) AS NET_WT_MEAS,\n  TRIM(MARA.prdha) AS PROD_HIER_CD,\n  TRIM(MARA.qmpur) AS PRCMT_QUAL_MGMT_IND,\n  TRIM(MARA.raube) AS STRG_CONDS_CD,\n  TRIM(MARA.tempb) AS LBL_TEMP_RNG,\n  TRIM(MARA.tragr) AS TRSPN_GRP_CD,\n  TRIM(MARA.xchpf) AS BTCH_MNG_IND,\n  TRIM(MARA.zeinr) AS MATL_DOC_NUM,\n  TRIM(MARA.zeivr) AS MATL_DOC_VERS_NUM,\n  TRIM(MAKT.maktx) AS MATL_SHRT_DESC,\n  NULL AS MMS_SURGERY_TYPE_CD,\n  NULL AS MMS_MATL_TYPE_CD,\n  NULL AS PRMRY_PLNT_CD,\n  NULL AS MMS_FIN_CLSN_CD,\n  NULL AS MMS_STERILIZATION_IND,\n  NULL AS MATL_CATLG_NUM,\n  NULL AS SRC_SECTR_CD,\n  NULL AS MATL_PARNT_CD,\n  NULL AS MATL_SUB_TYPE_CD,\n  NULL AS FIN_HIER_BASE_CD,\n  NULL AS IMPLNT_INSTM_IND,\n  NULL AS MATL_MOD_CD,\n  NULL AS KIT_IND,\n  NULL AS MMS_TEMP_SENS_IND,\n  NULL AS DIR_PART_MRKNG_CD,\n  TRIM(MARA.mtpos_mara) AS MATL_CAT_GRP_CD,\n  NULL AS PLNG_HIER3_CD,\n  NULL AS MATL_SPEC_NUM,\n  NULL AS MATL_SPEC_VERS_NUM,\n  TRIM(MARA.AENAM) AS CHG_BY,\n  TRIM(MARA.AESZN) AS DOC_CHG_NUM,\n  NULL AS CNTNR_REQ,\n  TRIM(MARA.BISMT) AS OLD_MATL_NUM,\n  CAST(TRIM(MARA.BRGEW) AS DECIMAL(18,4)) AS GRS_WT,\n  TRIM(MARA.BSTME) AS ORDR_UNIT_PUR_UOM,\n  NULL AS CHEM_CMPLI,\n  TRIM(MARA.ERNAM) AS CRT_BY,\n  CASE\n    WHEN MARA.ERSDA = '00000000' THEN CAST(NULL AS TIMESTAMP)\n    ELSE TO_TIMESTAMP(MARA.ERSDA, \\\"yyyyMMdd\\\")\n  END AS CRT_ON_DTTM,\n  TRIM(MARA.ETIAR) AS LBL_TYPE,\n  TRIM(MARA.ETIFO) AS LBL_FORM,\n  TRIM(MARA.EXTWG) AS EXTRNL_MATL_GRP,\n  TRIM(MARA.FUELG) AS MAX_LVL,\n  TRIM(MARA.GEWEI) AS WT_UNIT,\n  TRIM(MARA.GROES) AS SIZE_DIM,\n  TRIM(MARA.IPRKZ) AS PER_IN,\n  CASE\n    WHEN MARA.LAEDA = '00000000' THEN CAST(NULL AS TIMESTAMP)\n    ELSE TO_TIMESTAMP(MARA.LAEDA, \\\"yyyyMMdd\\\")\n  END AS LAST_CHG_DT_TIME_DTTM,\n  TRIM(MARA.MAGRV) AS MATL_GRP_PKGNG_MATL,\n  NULL AS MATL_EXTRNL,\n  TRIM(MARA.MHDLP) AS STRG_PCT,\n  CASE\n    WHEN MARA.MSTDE = '00000000' THEN CAST(NULL AS TIMESTAMP)\n    ELSE TO_TIMESTAMP(MARA.MSTDE, \\\"yyyyMMdd\\\")\n  END AS VAL_FROM_XPLNT_DTTM,\n  CASE\n    WHEN MARA.MSTDV = '00000000' THEN CAST(NULL AS TIMESTAMP)\n    ELSE To_timestamp(MARA.MSTDV, \\\"yyyyMMdd\\\")\n  END AS VAL_FROM_XDC_DTTM,\n  TRIM(MARA.NORMT) AS INDSTR_STD_DESC,\n  TRIM(MARA.RDMHD) AS RD_RUL_SLED,\n  TRIM(MARA.SERLV) AS SER_LVL,\n  NULL AS MATL_HAZ_CD,\n  TRIM(MARA.VABME) AS VAR_ORDR_UNT,\n  TRIM(MARA.VHART) AS PKGNG_MATL_TYPE,\n  TRIM(MARA.VOLEH) AS VOL_UNIT,\n  CAST(TRIM(MARA.VOLUM) AS DECIMAL(18,4)) AS VOL,\n  TRIM(MARA.WRKST) AS BSC_MATL,\n  TRIM(MARA.ZEIAR) AS DOC_TYPE,\n  TRIM(MARA.ZEIFO) AS DOC_PG_FMT,\n  TRIM(MARA.EAN11) AS EAN_UPC,\n  TRIM(MARA.NUMTP) AS EAN_CAT,\n  NULL AS MFR_BOOK_PART_NUM,\n  NULL AS DIR_SHP_FL,\n  NULL AS FIN_PLNT,\n  NULL AS MAIN_STRG_LOC,\n  NULL AS PCS_PER_SLS_UNT,\n  NULL AS PROD_LINE,\n  NULL AS MAKE_BUY_IN,\n  NULL AS STRT_PLNT,\n  NULL AS MATL_SHRT_DESC_UP_CASE,\n  NULL AS MATL_TYPE_DESC,\n  NULL AS FRAN_CD_DESC,\n  NULL AS BASE_UOM_DESC,\n  NULL AS OBJ_NUM,\n  NULL AS TYPE_OF_MATERIAL,\n  NULL AS STERILE,\n  NULL AS BRAVO_MINOR_CODE,\n  NULL AS BRAVO_MINOR_CODE_DESC,\n  NULL AS NDL_SLS_TYPE,\n  NULL AS SUTURE_LENGTH_INCH,\n  NULL AS SER_TYPE,\n  NULL AS GTIN_VRNT,\n  NULL AS MATL_GRP_DESC,\n  NULL AS MATL_GRP_DESC_2,\n  '#' AS SHRT_MATL_NUM,\n  NULL AS CMMDTY,\n  NULL AS NDL_COLOR,\n  NULL AS NDL_ALLOY,\n  NULL AS SUTURE_USP,\n  CASE\n    WHEN (LENGTH(TRIM(MARA.EAN11)) > 0 AND LENGTH(TRIM(MARA.EAN11)) < 14) THEN LPAD(TRIM(MARA.EAN11), 14, 0)\n    ELSE TRIM(MARA.EAN11)\n  END AS EAN_UPC_HRMZD\nFROM\n  {Config.sourceDatabase}.MARA MARA\n  LEFT JOIN {Config.sourceDatabase}.MAKT MAKT on MARA.matnr = MAKT.matnr\n  and MAKT.spras = 'E'\n  and MAKT._deleted_ = 'F'\n  and MAKT.MANDT = '600'\nWHERE\n  MARA._deleted_ = 'F'\n  and MARA.MANDT = '600'  \n \n\"\"\")",
            "scriptMethodHeader" : "def Script(spark: SparkSession) -> DataFrame:",
            "scriptMethodFooter" : "    return out0"
          }
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      }
    }


    