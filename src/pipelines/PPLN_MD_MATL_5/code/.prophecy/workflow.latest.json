{
      "metainfo" : {
        "id" : "1",
        "language" : "python",
        "fabricId" : "32",
        "frontEndLanguage" : "sql",
        "mode" : "batch",
        "udfs" : {
          "language" : "python",
          "udfs" : [ ]
        },
        "udafs" : {
          "language" : "python",
          "code" : ""
        },
        "configuration" : {
          "common" : {
            "type" : "record",
            "fields" : [ {
              "name" : "targetSchema",
              "kind" : {
                "type" : "string",
                "value" : "l1_md_prophecy"
              },
              "optional" : false
            }, {
              "name" : "sourceSystem",
              "kind" : {
                "type" : "string",
                "value" : "bw2"
              },
              "optional" : false
            }, {
              "name" : "sourceDatabase",
              "kind" : {
                "type" : "string",
                "value" : "bw2"
              },
              "optional" : false
            } ]
          },
          "oldCommon" : {
            "type" : "record",
            "fields" : [ ]
          },
          "fabrics" : { },
          "instances" : { },
          "selected" : "default",
          "nonEditable" : [ ],
          "isSubscribedPipelineWithPipelineConfigs" : false
        },
        "sparkConf" : [ ],
        "hadoopConf" : [ ],
        "codeMode" : "sparse",
        "buildSystem" : "maven",
        "externalDependencies" : [ ],
        "isImported" : false,
        "interimMode" : "Full",
        "interimModeEnabled" : true,
        "visualCodeInterimMode" : "Disabled",
        "recordsLimit" : {
          "enabled" : false,
          "value" : 1000
        },
        "topLevelPackage" : "PPLN_MD_MATL_5"
      },
      "connections" : [ {
        "id" : "845a84d4-a4ea-4bb0-8d73-c1f6d3a0f24d",
        "source" : "b72807cf-5dc9-4066-a659-f0546c0c2edd",
        "sourcePort" : "d64425e6-387e-43e3-bf85-f4c31abb1b2c",
        "target" : "147cc3c5-1c51-40d5-a429-b6051ac01b95",
        "targetPort" : "0f1ee41e-33da-4fe1-a246-796c337ac1f9"
      }, {
        "id" : "37cf2532-10eb-444e-aea7-0f8a696ad481",
        "source" : "a64cdbb5-a44f-483e-bb02-b07342d68455",
        "sourcePort" : "0a4d664a-8436-4b21-9b33-2e2b655a2904",
        "target" : "b72807cf-5dc9-4066-a659-f0546c0c2edd",
        "targetPort" : "d201b432-b6db-4f1c-8bc7-5182e22c1c23"
      } ],
      "processes" : {
        "147cc3c5-1c51-40d5-a429-b6051ac01b95" : {
          "id" : "147cc3c5-1c51-40d5-a429-b6051ac01b95",
          "component" : "Target",
          "metadata" : {
            "label" : "MD_MATL",
            "slug" : "MD_MATL",
            "x" : -540,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "0f1ee41e-33da-4fe1-a246-796c337ac1f9",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "datasetId" : "datasets/MD_MATL"
          }
        },
        "b72807cf-5dc9-4066-a659-f0546c0c2edd" : {
          "id" : "b72807cf-5dc9-4066-a659-f0546c0c2edd",
          "component" : "SchemaTransform",
          "metadata" : {
            "label" : "addL1fields",
            "slug" : "addL1fields",
            "x" : -780,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "d201b432-b6db-4f1c-8bc7-5182e22c1c23",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ {
              "id" : "d64425e6-387e-43e3-bf85-f4c31abb1b2c",
              "slug" : "out",
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "transformations" : [ {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "SRC_SYS_CD",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'$sourceSystem'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'MATL_NUM',MATL_NUM))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_md5_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "md5(to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'MATL_NUM',MATL_NUM)))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_l1_upt_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            } ]
          }
        },
        "a64cdbb5-a44f-483e-bb02-b07342d68455" : {
          "id" : "a64cdbb5-a44f-483e-bb02-b07342d68455",
          "component" : "Script",
          "metadata" : {
            "label" : "sql_MD_MATL",
            "slug" : "sql_MD_MATL",
            "x" : -1060,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "0a4d664a-8436-4b21-9b33-2e2b655a2904",
              "slug" : "out0",
              "schema" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "_deleted_",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  } 
                } ]
              },
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : true
          },
          "properties" : {
            "script" : "out0 = spark.sql(f\"\"\"\n    WITH cte_f4104 AS\n  (select ivlitm,MinShelfLifeInDays from (\nselect *,ROW_NUMBER() over (partition by ivlitm order by ivlitm DESC) as RNK from (\nSELECT f4104_adt.ivlitm as ivlitm,\n          CASE\n              WHEN f4104_adt.ivdsc1 IS NOT \n              ELSE\n                     (SELECT F6060002.gpurab * 30\n                      FROM {Config.sourceDatabase}.F6060002 F6060002\n      WHERE LOWER(TRIM(F6060002.gpgs1a)) = LOWER('R5841110')\n      AND LOWER(TRIM(F6060002.gpgs2a)) = LOWER('MinShelfLife')\n      AND F6060002._deleted_ = 'F')\n          END AS MinShelfLifeInDays\n   FROM {Config.sourceDatabase}.f4104_adt\n   WHERE f4104_adt.ivxrt='XL'\n     AND f4104_adt._deleted_ = 'F' ))where RNK = 1)\nSELECT\n    '{Config.sourceSystem}'   AS SRC_SYS_CD\n,F4101_ADT.imlitm AS MATL_NUM\n,TRIM(F4101_ADT.imglpt) AS MATL_TYPE_CD\n,TRIM(F4101_ADT.imsrp5) AS BRND_CD\n,TRIM(F4101_ADT.imsrp1) AS FRANCHISE_CD\n,TRIM(F4101_ADT.imsrp2) AS LCL_PLNG_SUB_FRAN_CD\n\n\n,TRIM(F4101_ADT.imprp7) AS MATL_GRP_CD\n\n,TRIM(F4101_ADT.imuom1) AS BASE_UOM_CD\n,CAST(F4101_ADT.imsld AS DECIMAL(18,4)) AS TOT_SHLF_LIF_DAYS_CNT\n,CAST(cte_f4104.MinShelfLifeInDays AS DECIMAL(18, 4)) AS MIN_SHLF_RMN_LIF_DAYS_CNT\n,TRIM(F4101_ADT.imstkt) AS MATL_STS_CD\n\n\n,TRIM(F4101_ADT.imsrp3) AS PROD_HIER_CD\n\n\n\n\n,CASE WHEN TRIM(F4101_ADT.imsrce) IN ('0', '') OR TRIM(F4101_ADT.imsrce) IS \n,TRIM(F4101_ADT.imdraw) AS MATL_DOC_NUM\n,TRIM(F4101_ADT.imrvno) AS MATL_DOC_VERS_NUM\n,TRIM(F4101_ADT.imdsc1) AS MATL_SHRT_DESC\n\n\n\n\n\n,TRIM(F4101_ADT.imaitm) AS MATL_CATLG_NUM\n\n,TRIM(F4101_ADT.imlitm) AS MATL_PARNT_CD\n,TRIM(F4101_ADT.imsrp4) AS MATL_SUB_TYPE_CD\n,TRIM(F4101_ADT.imprp5) AS FIN_HIER_BASE_CD\n\n\n\n\n\n,TRIM(F4101_ADT.imsrp5) AS MATL_CAT_GRP_CD\n,TRIM(F4101_ADT.imprp8) AS PLNG_HIER3_CD\n,TRIM(F4101_ADT.imdraw) AS MATL_SPEC_NUM\n,TRIM(F4101_ADT.imrvno) AS MATL_SPEC_VERS_NUM\n,TRIM(F4101_ADT.imuser) AS CHG_BY\n\n\n\n\n\n\n\n\n\n\n\n\n,TRIM(F4101_ADT.imuwum) AS WT_UNIT\n\n\n,CASE\n    WHEN LENGTH(F4101_ADT.imtday) = 6 THEN TO_TIMESTAMP(\n      CONCAT(\n        DATE_ADD(\n          CAST(\n            SUBSTRING(F4101_ADT.IMUPMJ + 1900000, 1, 4) AS DATE\n          ),\n          CAST(SUBSTRING(F4101_ADT.IMUPMJ, 4, 3) AS INT) -1\n        ),\n        \\\"\\\"\\\"\\\",\n        F4101_ADT.imtday\n      ),\n      'yyyy-MM-ddHHmmss'\n    )\n    WHEN LENGTH(F4101_ADT.imtday) = 5 THEN TO_TIMESTAMP(\n      CONCAT(\n        DATE_ADD(\n          CAST(\n            SUBSTRING(F4101_ADT.IMUPMJ + 1900000, 1, 4) AS DATE\n          ),\n          CAST(SUBSTRING(F4101_ADT.IMUPMJ, 4, 3) AS INT) -1\n        ),\n        \\\"\\\"\\\"\\\",\n        concat(0, F4101_ADT.imtday)\n      ),\n      'yyyy-MM-ddHHmmss'\n    )\n    ELSE TO_TIMESTAMP(\n      DATE_ADD(\n        CAST(SUBSTRING(F4101_ADT.IMUPMJ + 1900000, 1, 4) AS Date),\n        CAST(SUBSTRING(F4101_ADT.IMUPMJ, 4, 3) as INT) -1\n      )\n    )\n END AS LAST_CHG_DT_TIME_DTTM\n\n\n\n\n\n\n\n\n\n\n\n,TRIM(F4101_ADT.imvcud) AS VOL_UNIT\n,CAST(TRIM(F4101_ADT.imuvm1) AS DECIMAL(18,4)) AS VOL\n\n\n\n\n\n\n\n\n\n\n,TRIM(F4101_ADT.imprp4) AS PROD_LINE\n\n\n\n,TRIM(f0005_adt_s2.drdl01) AS MATL_TYPE_DESC\n,TRIM(f0005_adt_s1.drdl01) AS FRAN_CD_DESC\n\n\n\n\n,TRIM(F4101_ADT.imsrp0) AS BRAVO_MINOR_CODE\n,TRIM(f0005_adt.drdl01) AS BRAVO_MINOR_CODE_DESC\n\n\n\n\n\n\n,F4101_ADT.imitm AS SHRT_MATL_NUM\n,TRIM(F4101_ADT.imprp1) AS CMMDTY\n\n\n\n\nFROM {Config.sourceDatabase}.F4101_ADT F4101_ADT\nLEFT JOIN cte_f4104 ON f4101_adt.imlitm = cte_f4104.ivlitm\nLEFT JOIN {Config.sourceDatabase}.f0005_adt f0005_adt \nON F4101_ADT.IMSRP0 = TRIM(f0005_adt.DRKY) \nAND TRIM(f0005_adt.DRSY) = '41'\nAND f0005_adt.DRRT = '10'\nAND f0005_adt._deleted_ = 'F'\nLEFT JOIN {Config.sourceDatabase}.f0005_adt f0005_adt_s1 \nON F4101_ADT.IMSRP1 = TRIM(f0005_adt_s1.DRKY) \nAND TRIM(f0005_adt_s1.DRSY) = '41'\nAND f0005_adt_s1.DRRT = 'S1'\nAND f0005_adt_s1._deleted_ = 'F'\nLEFT JOIN {Config.sourceDatabase}.f0005_adt f0005_adt_s2\nON F4101_ADT.IMSRP2 = TRIM(f0005_adt_s2.DRKY) \nAND TRIM(f0005_adt_s2.DRSY) = '41'\nAND f0005_adt_s2.DRRT = 'S2'\nAND f0005_adt_s2._deleted_ = 'F'\nWHERE F4101_ADT._deleted_ = 'F'  \n \n\"\"\")",
            "scriptMethodHeader" : "def Script(spark: SparkSession) -> DataFrame:",
            "scriptMethodFooter" : "    return out0"
          }
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      }
    }


    