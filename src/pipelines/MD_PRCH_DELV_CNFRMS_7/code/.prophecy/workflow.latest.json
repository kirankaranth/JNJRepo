{
  "metainfo" : {
    "id" : "1",
    "language" : "python",
    "fabricId" : "32",
    "frontEndLanguage" : "sql",
    "mode" : "batch",
    "udfs" : {
      "language" : "python",
      "udfs" : [ ],
      "functionPackageName" : "cdl_l1_team.cdl_md_l1.functions",
      "sharedFunctionPackageNames" : [ ]
    },
    "udafs" : {
      "language" : "python",
      "code" : ""
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ {
          "name" : "targetSchema",
          "kind" : {
            "type" : "string",
            "value" : "dev_md_l1"
          },
          "optional" : false,
          "isWorkflowNodeConfiguration" : false
        }, {
          "name" : "sourceSystem",
          "kind" : {
            "type" : "string",
            "value" : "hcs"
          },
          "optional" : false,
          "isWorkflowNodeConfiguration" : false
        }, {
          "name" : "sourceDatabase",
          "kind" : {
            "type" : "string",
            "value" : "hcs"
          },
          "optional" : false,
          "isWorkflowNodeConfiguration" : false
        }, {
          "name" : "MANDT",
          "kind" : {
            "type" : "string",
            "value" : ""
          },
          "optional" : true,
          "isWorkflowNodeConfiguration" : false
        }, {
          "name" : "DAI_ETL_ID",
          "kind" : {
            "type" : "int",
            "value" : "0"
          },
          "optional" : false,
          "isWorkflowNodeConfiguration" : false
        } ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ ],
    "hadoopConf" : [ ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ ],
    "dependentProjectExternalDependencies" : [ ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "MD_PRCH_DELV_CNFRMS_7",
    "configurationVersion" : "v1"
  },
  "connections" : [ {
    "id" : "99321480-35ef-41f2-9585-0013ffc1f204",
    "source" : "f4bd76ca-61a8-42d2-8cfa-ba010e2e6836",
    "sourcePort" : "5e61a7f8-1b79-4daf-a4e7-933fc8a31818",
    "target" : "eb898b99-9fdf-4839-bf80-d753610ef310",
    "targetPort" : "4c335f46-9318-45ff-8721-79827750efa4"
  }, {
    "id" : "af6a59ad-6c3c-42bd-84f2-39a8e39e11a1",
    "source" : "351bfe40-1cb6-45c8-aea4-757f8828cfb0",
    "sourcePort" : "27f4294d-312f-4d5b-8c02-0101d4ca44a9",
    "target" : "f4bd76ca-61a8-42d2-8cfa-ba010e2e6836",
    "targetPort" : "72580415-b8df-441b-987c-1719423aef44"
  } ],
  "processes" : {
    "eb898b99-9fdf-4839-bf80-d753610ef310" : {
      "id" : "eb898b99-9fdf-4839-bf80-d753610ef310",
      "component" : "Target",
      "metadata" : {
        "label" : "MD_PRCH_DELV_CNFRMS",
        "slug" : "MD_PRCH_DELV_CNFRMS",
        "x" : -540,
        "y" : -400,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "4c335f46-9318-45ff-8721-79827750efa4",
          "slug" : "in0"
        } ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "datasetId" : "datasets/MD_PRCH_DELV_CNFRMS"
      }
    },
    "f4bd76ca-61a8-42d2-8cfa-ba010e2e6836" : {
      "id" : "f4bd76ca-61a8-42d2-8cfa-ba010e2e6836",
      "component" : "SchemaTransform",
      "metadata" : {
        "label" : "addL1fields",
        "slug" : "addL1fields",
        "x" : -780,
        "y" : -400,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "72580415-b8df-441b-987c-1719423aef44",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "_deleted_",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "5e61a7f8-1b79-4daf-a4e7-933fc8a31818",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "transformations" : [ {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "SRC_SYS_CD",
            "expression" : {
              "format" : "sql",
              "expression" : "'$sourceSystem'"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        }, {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "_pk_",
            "expression" : {
              "format" : "sql",
              "expression" : "to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'PO_NUM',PO_NUM,'PO_LINE_NBR',PO_LINE_NBR,'CNFRM_SEQ_NBR',CNFRM_SEQ_NBR,'CNFRM_CAT_CD',CNFRM_CAT_CD,'CO_CD',CO_CD,'ORDER_SUF',ORDER_SUF))"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        }, {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "_pk_md5_",
            "expression" : {
              "format" : "sql",
              "expression" : "md5(to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'PO_NUM',PO_NUM,'PO_LINE_NBR',PO_LINE_NBR,'CNFRM_SEQ_NBR',CNFRM_SEQ_NBR,'CNFRM_CAT_CD',CNFRM_CAT_CD,'CO_CD',CO_CD,'ORDER_SUF',ORDER_SUF)))"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        }, {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "_l1_upt_",
            "expression" : {
              "format" : "sql",
              "expression" : "current_timestamp()"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        }, {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "DAI_ETL_ID",
            "expression" : {
              "format" : "sql",
              "expression" : "'$DAI_ETL_ID'"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        }, {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "DAI_CRT_DTTM",
            "expression" : {
              "format" : "sql",
              "expression" : "current_timestamp()"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        }, {
          "kind" : "AddReplaceColumn",
          "AddReplaceColumn" : {
            "sourceColumn" : "DAI_UPDT_DTTM",
            "expression" : {
              "format" : "sql",
              "expression" : "current_timestamp()"
            }
          },
          "DropColumn" : {
            "sourceColumn" : ""
          },
          "RenameColumn" : {
            "sourceColumn" : "",
            "targetColumn" : ""
          }
        } ]
      }
    },
    "351bfe40-1cb6-45c8-aea4-757f8828cfb0" : {
      "id" : "351bfe40-1cb6-45c8-aea4-757f8828cfb0",
      "component" : "Script",
      "metadata" : {
        "label" : "sql_MD_PRCH_DELV_CNFRMS",
        "slug" : "sql_MD_PRCH_DELV_CNFRMS",
        "x" : -1060,
        "y" : -400,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "27f4294d-312f-4d5b-8c02-0101d4ca44a9",
          "slug" : "out0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "_deleted_",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : true
      },
      "properties" : {
        "script" : "out0 = spark.sql(f\"\"\"\n    SELECT\n'{Config.sourceSystem}' AS SRC_SYS_CD\n, TRIM(ekes.ebeln) as PO_NUM\n, TRIM(ekes.ebelp) as PO_LINE_NBR\n, CAST(TRIM(ekes.etens) AS INT) as CNFRM_SEQ_NBR\n, TRIM(ekes.ebtyp) as CNFRM_CAT_CD\n, case when Trim(ekes.eindt) = '00000000' then CAST(NULL AS timestamp)\nelse to_timestamp(Trim(ekes.eindt),\\\"yyyyMMdd\\\") end as DELV_DTTM\n, case when Trim(ekes.erdat) = '00000000' then CAST(NULL AS timestamp)\nelse to_timestamp(Trim(ekes.erdat),\\\"yyyyMMdd\\\") end as CRT_ON_DTTM\n, CAST(TRIM(ekes.menge) AS decimal(18,4)) as CNFRM_QTY\n, CAST(TRIM(ekes.dabmg) AS decimal(18,4)) as MRP_ADJ_QTY\n, TRIM(ekes.vbeln) as SLS_ORDR_NUM\n, TRIM(ekes.vbelp) as SLS_ORDR_LINE_NBR\n, TRIM(ekes.charg) as VEND_BTCH_NUM\n, NULL as REF_DOC_NUM\n, '#' as CO_CD\n, '#' as ORDER_SUF\n, TRIM(ekes.lpein) as DT_CAT_OF_DELV_DT_SUP_CNFRM\n, TRIM(ekes.estkz) as CRT_IN_SUP_CNFRM\n, TRIM(ekes.loekz) as SUP_CNFRM_DEL_IN\n, TRIM(ekes.kzdis) as CNFRM_RLVNT_TO_MATL_PLNG\n, TRIM(ekes.mprof) as MFR_PART_PRFL\n, TRIM(ekes.ematn) as MATL_NUM_CRSPN_TO_MFR_PART_NUM\n, CAST(TRIM(ekes.mahnz) AS decimal(18,4)) as NUM_OF_RMNDR\n, TRIM(ekes.uecha) as HI_LVL_ITM_OF_BTCH_SPLT_ITM\n, TRIM(ekes.ref_etens) as SEQ_NUM_OF_SUP_CNFRM\n, TRIM(ekes.imwrk) as DELV_HAS_STS_IN_PLNT\n, TRIM(ekes.vbeln_st) as DELV\n, TRIM(ekes.vbelp_st) as DELV_ITM\n,CASE WHEN ekes.handoverdate = '00000000' THEN CAST(NULL AS TIMESTAMP) ELSE to_timestamp(concat(ekes.handoverdate, ekes.handovertime),\\\"yyyyMMddHHmmss\\\") END AS HANDOVR_DTTM\n, trim(sgt_scat) AS STK_SGMNT\n, NULL as UTC_TMST\n, NULL as QTY_OF_ORDR_CNFRM\n, NULL as MRP_REDUC_QTY\n, NULL as PER_OF_PERF_STRT_DTTM\n, NULL as PER_OF_PERF_END_DTTM\n, NULL as SRVC_PERFMR\n, NULL as EXPTD_VAL_OF_OVRL_LMT\n, NULL as SUP_CNFRM_NUM\n, NULL as SUP_CNFRM_ITM\n, NULL as ALC_STK_QTY\n, NULL as ORIG_QTY_OF_SHIPPING_NTF\n, NULL as REF_UUID_OF_TRSPN_MGMT,\nekes._upt_ as _l0_upt_\nFROM\n  {Config.sourceDatabase}.ekes ekes\nWHERE\n  ekes._deleted_ = 'F'\n  AND ekes.mandt = '100'\n  \n \n\"\"\")",
        "scriptMethodHeader" : "def Script(spark: SparkSession) -> DataFrame:",
        "scriptMethodFooter" : "    return out0"
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false
  },
  "diagnostics" : [ {
    "property" : "$.workflow.processes.f4bd76ca-61a8-42d2-8cfa-ba010e2e6836",
    "range" : {
      "start" : {
        "line" : 0,
        "character" : 0
      },
      "end" : {
        "line" : 0,
        "character" : 0
      }
    },
    "severity" : 1,
    "message" : "pyspark.sql.utils.AnalysisException: Column 'PO_NUM' does not exist. Did you mean one of the following? [SRC_SYS_CD, _deleted_]; line 1 pos 49;",
    "tags" : [ ],
    "relatedInformation" : [ ]
  }, {
    "property" : "$.workflow.processes.eb898b99-9fdf-4839-bf80-d753610ef310",
    "range" : {
      "start" : {
        "line" : 0,
        "character" : 0
      },
      "end" : {
        "line" : 0,
        "character" : 0
      }
    },
    "severity" : 1,
    "message" : "One of the upstream gems is broken. Please, fix it first.",
    "tags" : [ ],
    "relatedInformation" : [ ]
  } ]
}