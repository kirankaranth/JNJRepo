{
      "metainfo" : {
        "id" : "1",
        "language" : "python",
        "fabricId" : "32",
        "frontEndLanguage" : "sql",
        "mode" : "batch",
        "udfs" : {
          "language" : "python",
          "udfs" : [ ]
        },
        "udafs" : {
          "language" : "python",
          "code" : ""
        },
        "configuration" : {
          "common" : {
            "type" : "record",
            "fields" : [ {
              "name" : "targetSchema",
              "kind" : {
                "type" : "string",
                "value" : "sbx_md_l1"
              },
              "optional" : false
            }, {
              "name" : "sourceSystem",
              "kind" : {
                "type" : "string",
                "value" : "hm2"
              },
              "optional" : false
            }, {
              "name" : "sourceDatabase",
              "kind" : {
                "type" : "string",
                "value" : "hm2"
              },
              "optional" : false
            }, {
              "name" : "MANDT",
              "kind" : {
                "type" : "string",
                "value" : "100"
              },
              "optional" : true
            }, {
              "name" : "DAI_ETL_ID",
              "kind" : {
                "type" : "int",
                "value" : "0"
              },
              "optional" : false
            } ]
          },
          "oldCommon" : {
            "type" : "record",
            "fields" : [ ]
          },
          "fabrics" : { },
          "instances" : { },
          "selected" : "default",
          "nonEditable" : [ ],
          "isSubscribedPipelineWithPipelineConfigs" : false
        },
        "sparkConf" : [ ],
        "hadoopConf" : [ ],
        "codeMode" : "sparse",
        "buildSystem" : "maven",
        "externalDependencies" : [ ],
        "isImported" : false,
        "interimMode" : "Full",
        "interimModeEnabled" : true,
        "visualCodeInterimMode" : "Disabled",
        "recordsLimit" : {
          "enabled" : false,
          "value" : 1000
        },
        "topLevelPackage" : "MD_DOC_HDR_INVC_RCPT_1"
      },
      "connections" : [ {
        "id" : "b24efd0b-b011-4e26-9b5e-511ea9645f92",
        "source" : "603b2390-6d4d-4c8b-ac43-b84223847077",
        "sourcePort" : "820bbef7-1cfd-47ea-b719-107bf6e06475",
        "target" : "be8a4abb-a007-45ac-a3a0-64f4b208a9dd",
        "targetPort" : "50242bcd-1307-4f01-a010-e1b9fb9854fe"
      }, {
        "id" : "49dc043a-c74d-4643-a969-30c1fa1229b9",
        "source" : "d1c68a29-e8f1-4fec-b533-eaf8ed7dda56",
        "sourcePort" : "2df71c8b-b7f6-41bd-972a-e66ccc1077ac",
        "target" : "603b2390-6d4d-4c8b-ac43-b84223847077",
        "targetPort" : "dbb953ce-3025-4a13-a70f-ff8450b839e5"
      } ],
      "processes" : {
        "be8a4abb-a007-45ac-a3a0-64f4b208a9dd" : {
          "id" : "be8a4abb-a007-45ac-a3a0-64f4b208a9dd",
          "component" : "Target",
          "metadata" : {
            "label" : "MD_DOC_HDR_INVC_RCPT",
            "slug" : "MD_DOC_HDR_INVC_RCPT",
            "x" : -540,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "50242bcd-1307-4f01-a010-e1b9fb9854fe",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "datasetId" : "datasets/MD_DOC_HDR_INVC_RCPT"
          }
        },
        "603b2390-6d4d-4c8b-ac43-b84223847077" : {
          "id" : "603b2390-6d4d-4c8b-ac43-b84223847077",
          "component" : "SchemaTransform",
          "metadata" : {
            "label" : "addL1fields",
            "slug" : "addL1fields",
            "x" : -780,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "dbb953ce-3025-4a13-a70f-ff8450b839e5",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ {
              "id" : "820bbef7-1cfd-47ea-b719-107bf6e06475",
              "slug" : "out",
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "transformations" : [ {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "SRC_SYS_CD",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'$sourceSystem'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'DOC_NUM_OF_INVC_DOC',DOC_NUM_OF_INVC_DOC,'FISC_YR',FISC_YR))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_md5_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "md5(to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'DOC_NUM_OF_INVC_DOC',DOC_NUM_OF_INVC_DOC,'FISC_YR',FISC_YR)))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_l1_upt_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            },
            {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "DAI_ETL_ID",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'$DAI_ETL_ID'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            },{
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "DAI_CRT_DTTM",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            },{
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "DAI_UPDT_DTTM",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            },{
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_deleted_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'F'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }
            ]
          }
        },
        "d1c68a29-e8f1-4fec-b533-eaf8ed7dda56" : {
          "id" : "d1c68a29-e8f1-4fec-b533-eaf8ed7dda56",
          "component" : "Script",
          "metadata" : {
            "label" : "sql_MD_DOC_HDR_INVC_RCPT",
            "slug" : "sql_MD_DOC_HDR_INVC_RCPT",
            "x" : -1060,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "2df71c8b-b7f6-41bd-972a-e66ccc1077ac",
              "slug" : "out0",
              "schema" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "_deleted_",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  } 
                } ]
              },
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : true
          },
          "properties" : {
            "script" : "out0 = spark.sql(f\"\"\"\n    SELECT\n  (\n    SELECT\n      src_sys.src_sys_cd\n    FROM\n      l1.src_sys\n    WHERE\n      src_sys.src_sys_cd = '{src_sys_cd}'\n      AND src_sys.active = TRUE\n  ) AS SRC_SYS_CD,\nTRIM(RBKP.BELNR) AS DOC_NUM_OF_INVC_DOC,\nTRIM(RBKP.GJAHR) AS FISC_YR,\nTRIM(RBKP.BLART) AS DOC_TYPE,\nCASE WHEN RBKP.BLDAT = '00000000' THEN NULL ELSE to_timestamp(RBKP.BLDAT,\\\"yyyyMMdd\\\") END AS IN_DOC_DTTM,\nCASE WHEN RBKP.BUDAT = '00000000' THEN NULL ELSE to_timestamp(RBKP.BUDAT,\\\"yyyyMMdd\\\") END AS PSTNG_IN_DOC_DTTM,\nTRIM(RBKP.USNAM) AS USER_NM,\nTRIM(RBKP.TCODE) AS TRX_CD,\nCASE WHEN RBKP.CPUDT = '00000000000000' OR RBKP.CPUTM = '00000000000000' THEN NULL ELSE to_timestamp(CONCAT(RBKP.CPUDT,RBKP.CPUTM),'yyyyMMddHHmmss') END AS ACTG_DOC_ENT_DTTM,\nTRIM(RBKP.VGART) AS TRX_TYPE_IN_AG08_DOC,\nTRIM(RBKP.XBLNR) AS REF_DOC_NUM,\nTRIM(RBKP.BUKRS) AS CO_CD,\nTRIM(RBKP.LIFNR) AS DIFF_INVC_PRTY,\nTRIM(RBKP.WAERS) AS CRNCY_KEY,\nCAST(TRIM(RBKP.KURSF) AS DECIMAL(18, 4)) AS EXCH_RT,\nCAST(TRIM(RBKP.RMWWR) AS DECIMAL(18, 4)) AS GRS_INVC_AMT_DOC_CRNCY,\nCAST(TRIM(RBKP.BEZNK) AS DECIMAL(18, 4)) AS NOT_PLAN_DELV_COST,\nCAST(TRIM(RBKP.WMWST1) AS DECIMAL(18, 4)) AS TAX_AMT_WTH_SIGN,\nTRIM(RBKP.MWSKZ1) AS TAX_CD,\nCAST(TRIM(RBKP.WMWST2) AS DECIMAL(18, 4)) AS OBSOL_TAX_AMT_DO_NOT_USE,\nTRIM(RBKP.MWSKZ2) AS OBSOL_SLS_TAX_CD,\nTRIM(RBKP.ZTERM) AS TERM_OF_PMT_KEY,\nTRIM(RBKP.ZBD1T) AS CASH_DISC_DAYS_1,\nCAST(TRIM(RBKP.ZBD1P) AS DECIMAL(18, 4)) AS CASH_DISC_PCT_1,\nTRIM(RBKP.ZBD2T) AS CASH_DISC_DAYS_2,\nCAST(TRIM(RBKP.ZBD2P) AS DECIMAL(18, 4)) AS CASH_DISC_PCT_2,\nTRIM(RBKP.ZBD3T) AS NET_PMT_TERM_PER,\nCAST(TRIM(RBKP.WSKTO) AS DECIMAL(18, 4)) AS CASH_DISC_AMT_DOC_CRNCY,\nTRIM(RBKP.XRECH) AS IN_POST_INVC,\nTRIM(RBKP.BKTXT) AS DOC_HDR_TEXT,\nTRIM(RBKP.SAPRL) AS SAP_RLSE,\nTRIM(RBKP.LOGSYS) AS LOGL_SYS,\nTRIM(RBKP.XMWST) AS CALC_TAX_AUTMT,\nTRIM(RBKP.STBLG) AS RVSL_DOC_NUM,\nTRIM(RBKP.STJAH) AS FISC_YR_OF_RVSL_DOC,\nTRIM(RBKP.MWSKZ_BNK) AS TAX_CD_BANK,\nTRIM(RBKP.TXJCD_BNK) AS TAX_JURIS,\nTRIM(RBKP.IVTYP) AS ORIG_LGSTCS_INVC_VERIF_DOC,\nTRIM(RBKP.XRBTX) AS IN_MORE_ONE_TAX_CD,\nTRIM(RBKP.REPART) AS IN_INVC_VERIF_TYPE,\nTRIM(RBKP.RBSTAT) AS INVC_DOC_STS,\nTRIM(RBKP.KNUMVE) AS DOC_COND_OWN_COND,\nTRIM(RBKP.KNUMVL) AS DOC_COND_VEND_ERR,\nCAST(TRIM(RBKP.ARKUEN) AS DECIMAL(18, 4)) AS AUTO_INVC_RDCTN_AMT,\nCAST(TRIM(RBKP.ARKUEMW) AS DECIMAL(18, 4)) AS SLS_TAX_AUTO_INVC_RDCTN_AMT,\nCAST(TRIM(RBKP.MAKZN) AS DECIMAL(18, 4)) AS MAN_ACPT_NET_DIFF_AMT,\nCAST(TRIM(RBKP.MAKZMW) AS DECIMAL(18, 4)) AS TAX_AMT_ACPT_MAN,\nCAST(TRIM(RBKP.LIEFFN) AS DECIMAL(18, 4)) AS VEND_ERR,\nCAST(TRIM(RBKP.LIEFFMW) AS DECIMAL(18, 4)) AS TAX_IN_VEND_ERR,\nTRIM(RBKP.XAUTAKZ) AS IN_AUTMT_ACPT_INVC,\nTRIM(RBKP.ESRNR) AS ISR_SBSCR_NUM,\nTRIM(RBKP.ESRPZ) AS ISR_CHK_DIG,\nTRIM(RBKP.ESRRE) AS ISR_REF_NUM,\nCAST(TRIM(RBKP.QSSHB) AS DECIMAL(18, 4)) AS WTHL_TAX_BASE_AMT,\nCAST(TRIM(RBKP.QSFBT) AS DECIMAL(18, 4)) AS WTHL_TAX_EXPT_AMT_DOC,\nTRIM(RBKP.QSSKZ) AS WTHL_TAX_CD,\nTRIM(RBKP.DIEKZ) AS SRVC_IN,\nTRIM(RBKP.LANDL) AS SUPL_CTRY,\nTRIM(RBKP.LZBKZ) AS ST_CENT_BANK_IN,\nCAST(TRIM(RBKP.TXKRS) AS DECIMAL(18, 4)) AS EXCH_RT_FOR_TAX,\nTRIM(RBKP.EMPFB) AS PAYEE_PYR,\nTRIM(RBKP.BVTYP) AS PTNR_BANK_TYPE,\nTRIM(RBKP.HBKID) AS SHRT_KEY_FOR_HS_BANK,\nTRIM(RBKP.ZUONR) AS ASGNMT_NUM,\nTRIM(RBKP.ZLSPR) AS PMT_BLK_KEY,\nTRIM(RBKP.ZLSCH) AS PMT_METH,\nCASE WHEN RBKP.ZFBDT = '00000000' THEN NULL ELSE to_timestamp(RBKP.ZFBDT,\\\"yyyyMMdd\\\") END AS BSLN_DUE_DT_CALC_DTTM,\nTRIM(RBKP.KIDNO) AS PMT_REF,\nTRIM(RBKP.REBZG) AS INVC_REF_DOC_NUM_INVC_REF,\nTRIM(RBKP.REBZJ) AS FISC_YR_OF_RLVNT_INVC_CR,\nTRIM(RBKP.XINVE) AS IN_CAP_GOODS_AFFCTD,\nTRIM(RBKP.EGMLD) AS RPTG_CTRY_DELV_GOODS_EU,\nTRIM(RBKP.XEGDR) AS IN_TRI_DEAL_WTHN_EU,\nCASE WHEN RBKP.VATDATE = '00000000' THEN NULL ELSE to_timestamp(RBKP.VATDATE,\\\"yyyyMMdd\\\") END AS TAX_RPTG_DTTM,\nTRIM(RBKP.HKONT) AS GENL_LDGR_ACCT,\nTRIM(RBKP.J_1BNFTYPE) AS Nota_FISC_TYPE,\nTRIM(RBKP.BRNCH) AS BRNCH_NUM,\nTRIM(RBKP.ERFPR) AS ENT_PRFL_LGSTCS_INVC_VERIF,\nTRIM(RBKP.SECCO) AS SECTN_CD,\nTRIM(RBKP.NAME1) AS NM_1,\nTRIM(RBKP.NAME2) AS NM_2,\nTRIM(RBKP.NAME3) AS NM_3,\nTRIM(RBKP.NAME4) AS NM_4,\nTRIM(RBKP.PSTLZ) AS PSTL_CD,\nTRIM(RBKP.ORT01) AS CITY,\nTRIM(RBKP.LAND1) AS CTRY_KEY,\nTRIM(RBKP.STRAS) AS HS_NUM_AND_STREET,\nTRIM(RBKP.PFACH) AS PO_BOX,\nTRIM(RBKP.PSTL2) AS PO_BOX_PSTL_CD,\nTRIM(RBKP.PSKTO) AS ACCT_NUM_BANK_ACCT_POST_OFF,\nTRIM(RBKP.BANKN) AS BANK_ACCT_NUM,\nTRIM(RBKP.BANKL) AS BANK_NUM,\nTRIM(RBKP.BANKS) AS BANK_CTRY_KEY,\nTRIM(RBKP.STCD1) AS TAX_NUM_1,\nTRIM(RBKP.STCD2) AS TAX_NUM_2,\nTRIM(RBKP.STKZU) AS LIAB_FOR_VAT,\nTRIM(RBKP.STKZA) AS IN_PTNR_SUBJ_EQLZTN_TAXI,\nTRIM(RBKP.REGIO) AS RGN,\nTRIM(RBKP.BKONT) AS BANK_CNTL_KEY,\nTRIM(RBKP.DTAWS) AS INSTR_KEY_DATA_MED_EXCH,\nTRIM(RBKP.DTAMS) AS IN_FOR_DATA_MED_EXCH,\nTRIM(RBKP.SPRAS) AS CHAR_FLD_OF_LGTH_1,\nTRIM(RBKP.XCPDK) AS IN_IS_ACCT_ONE_TIME_ACCT,\nTRIM(RBKP.EMPFG) AS PAYEE_CD,\nTRIM(RBKP.FITYP) AS TAX_TYPE,\nTRIM(RBKP.STCDT) AS TAX_NUM_TYPE,\nTRIM(RBKP.STKZN) AS NTRL_PRSN,\nTRIM(RBKP.STCD3) AS TAX_NUM_3,\nTRIM(RBKP.STCD4) AS TAX_NUM_4,\nTRIM(RBKP.BKREF) AS REF_SPEC_FOR_BANK_DTL,\nTRIM(RBKP.J_1KFREPRE) AS NM_OF_REP,\nTRIM(RBKP.J_1KFTBUS) AS TYPE_OF_BUSN,\nTRIM(RBKP.J_1KFTIND) AS TYPE_OF_INDSTR,\nTRIM(RBKP.ANRED) AS TITLE,\nTRIM(RBKP.STCEG) AS VAT_REGS_NUM,\nTRIM(RBKP.ERNAME) AS ENT_BY_EXTRNL_SYS_USER,\nCASE WHEN RBKP.REINDAT = '00000000' THEN NULL ELSE to_timestamp(RBKP.REINDAT,\\\"yyyyMMdd\\\") END AS INVC_RCPT_DTTM,\nTRIM(RBKP.UZAWE) AS PMT_METH_SPLMN,\nTRIM(RBKP.FDLEV) AS PLNG_LVL,\nCASE WHEN RBKP.FDTAG = '00000000' THEN NULL ELSE to_timestamp(RBKP.FDTAG,\\\"yyyyMMdd\\\") END AS PLNG_DTTM,\nTRIM(RBKP.ZBFIX) AS FX_PMT_TERM,\nTRIM(RBKP.FRGKZ) AS IN_RLSE_REQ,\nTRIM(RBKP.ERFNAM) AS NM_OF_PROC_ENT_OBJ,\nTRIM(RBKP.BUPLA) AS BUSN_PLACE,\nTRIM(RBKP.FILKD) AS ACCT_NUM_OF_BRNCH,\nTRIM(RBKP.GSBER) AS BUSN_AREA,\nTRIM(RBKP.LOTKZ) AS LOT_NUM_FOR_DOC,\nTRIM(RBKP.SGTXT) AS ITM_TEXT,\nTRIM(RBKP.INV_TRAN) AS TRX_IN_LGSTCS_INVC_VERIF,\nTRIM(RBKP.PREPAY_STATUS) AS PRPMT_STS,\nTRIM(RBKP.PREPAY_AWKEY) AS INVC_DOC_NUM_CRT_PRPMT,\nTRIM(RBKP.ASSIGN_STATUS) AS INVC_IN_ASGNMT_TEST_PRCS,\nCASE WHEN RBKP.ASSIGN_NEXT_DATE = '00000000' THEN NULL ELSE to_timestamp(RBKP.ASSIGN_NEXT_DATE,\\\"yyyyMMdd\\\") END AS NEXT_ASGNMT_TEST_DTTM,\nCASE WHEN RBKP.ASSIGN_END_DATE = '00000000' THEN NULL ELSE to_timestamp(RBKP.ASSIGN_END_DATE,\\\"yyyyMMdd\\\") END AS END_ASGNMT_TEST_DTTM,\nTRIM(RBKP.COPY_BY_BELNR) AS INVC_DOC_NUM_ORIG_INVC,\nTRIM(RBKP.COPY_BY_YEAR) AS FISC_YR_OF_ORIG_INVC,\nTRIM(RBKP.COPY_TO_BELNR) AS INVC_DOC_NUM_COPY_INVC,\nTRIM(RBKP.COPY_TO_YEAR) AS FISC_YR_OF_COPY_INVC,\nTRIM(RBKP.COPY_USER) AS USER_RVRS_AND_COPY_INVC,\nCAST(TRIM(RBKP.KURSX) AS DECIMAL(18, 4)) AS MKT_DATA_EXCH_RT,\nCASE WHEN RBKP.WWERT = '00000000' THEN NULL ELSE to_timestamp(RBKP.WWERT,\\\"yyyyMMdd\\\") END AS TRNL_DTTM,\nTRIM(RBKP.XREF3) AS REF_KEY_FOR_LINE_ITM,\nCASE WHEN RBKP.TXDAT = '00000000' THEN NULL ELSE to_timestamp(RBKP.TXDAT,\\\"yyyyMMdd\\\") END AS DTRMN_TAX_RT_DTTM,\nCASE WHEN RBKP.TXDAT_FROM = '00000000' THEN NULL ELSE to_timestamp(RBKP.TXDAT_FROM,\\\"yyyyMMdd\\\") END AS VLD_FROM_TAX_RT_DTTM,\nCAST(TRIM(RBKP.CTXKRS) AS DECIMAL(18, 4)) AS RT_TAX_VAL_RPTG_CRNCY,\nTRIM(RBKP.HKTID) AS ID_FOR_ACCT_DTL,\nTRIM(RBKP.MONAT) AS FISC_PER,\nTRIM(RBKP.STCD5) AS TAX_NUM5,\nTRIM(RBKP.INTAD) AS INET_ADDR_PTNR_CO_CLERK,\nTRIM(RBKP.GLO_RE1_OT) AS CTRY_RGN_SPEC_ACCT_DATA,\nTRIM(RBKP.BUSINESS_NETWORK_ORIGIN) AS ORIG_BUSN_NTWK_DOC,\nTRIM(RBKP.ISEOPBLOCKED) AS BUSN_PRPS_CMPLT,\nCASE WHEN RBKP.LASTCHANGEDATETIME = '00000000000000' THEN NULL ELSE to_timestamp(substring(RBKP.LASTCHANGEDATETIME,1,14),\\\"yyyyMMddHHmmss\\\") END AS UTC_TIME_STMP_LONG_DTTM,\nTRIM(RBKP.GLO_REF1_HD) AS CTRY_RGN_SPEC_REF1_DOC,\nCASE WHEN RBKP.GLO_DAT1_HD = '00000000' THEN NULL ELSE to_timestamp(RBKP.GLO_DAT1_HD,\\\"yyyyMMdd\\\") END AS CTRY_RGN_SPEC_DOC1_DTTM,\nTRIM(RBKP.GLO_REF2_HD) AS CTRY_RGN_SPEC_REF2_DOC,\nCASE WHEN RBKP.GLO_DAT2_HD = '00000000' THEN NULL ELSE to_timestamp(RBKP.GLO_DAT2_HD,\\\"yyyyMMdd\\\") END AS CTRY_RGN_SPEC_DOC2_DTTM,\nTRIM(RBKP.GLO_REF3_HD) AS CTRY_RGN_SPEC_REF3_DOC,\nCASE WHEN RBKP.GLO_DAT3_HD = '00000000' THEN NULL ELSE to_timestamp(RBKP.GLO_DAT3_HD,\\\"yyyyMMdd\\\") END AS CTRY_RGN_SPEC_DOC3_DTTM,\nTRIM(RBKP.GLO_REF4_HD) AS CTRY_RGN_SPEC_REF4_DOC,\nCASE WHEN RBKP.GLO_DAT4_HD = '00000000' THEN NULL ELSE to_timestamp(RBKP.GLO_DAT4_HD,\\\"yyyyMMdd\\\") END AS CTRY_RGN_SPEC_DOC4_DTTM,\nTRIM(RBKP.GLO_REF5_HD) AS CTRY_RGN_SPEC_REF5_DOC,\nCASE WHEN RBKP.GLO_DAT5_HD = '00000000' THEN NULL ELSE to_timestamp(RBKP.GLO_DAT5_HD,\\\"yyyyMMdd\\\") END AS CTRY_RGN_SPEC_DOC5_DTTM,\nTRIM(RBKP.GLO_BP1_HD) AS CTRY_RGN_SPEC_BUSN_PTNR1,\nTRIM(RBKP.GLO_BP2_HD) AS CTRY_RGN_SPEC_BUSN_PTNR2,\nCASE WHEN RBKP.CIM_REPLICATIONTIMESTAMP = '00000000000000' THEN NULL ELSE to_timestamp(substring(RBKP.CIM_REPLICATIONTIMESTAMP,1,14),\\\"yyyyMMddHHmmss\\\") END AS UTC_TIME_STMP_LONG2_DTTM,\nTRIM(RBKP.TMTYPE) AS TRSPN_MGMT_VERS,\nTRIM(RBKP.TAX_COUNTRY) AS TAX_RPTG_CTRY_RGN,\nTRIM(RBKP.TAX_COUNTRY_BNK) AS TAX_RPTG_CTRY_RGN2,\nCASE WHEN RBKP.FULFILLDATE = '00000000' THEN NULL ELSE to_timestamp(RBKP.FULFILLDATE,\\\"yyyyMMdd\\\") END AS TAX_FFL_DTTM,\nTRIM(RBKP.NODE_KEY) AS GUID_MM_SUP_INVC_IN1,\nTRIM(RBKP.PARENT_KEY) AS GUID_MM_SUP_INVC_IN2,\nTRIM(RBKP.ROOT_KEY) AS GUID_MM_SUP_INVC_IN3,\nTRIM(RBKP.J_1TPBUPL) AS BRNCH_CD,\nTRIM(RBKP.LOGMX_UUID) AS OBSOL_MEX_UUID,\nTRIM(RBKP.ANXTYPE) AS INVC_TYPE,\nCAST(TRIM(RBKP.ANXAMNT) AS DECIMAL(18, 4)) AS ANNEXATION_AMT,\nCAST(TRIM(RBKP.ANXPERC) AS DECIMAL(18, 4)) AS ANNEXATION_PCT,\nCASE WHEN RBKP.ZVAT_INDC = '00000000' THEN NULL ELSE to_timestamp(RBKP.ZVAT_INDC,\\\"yyyyMMdd\\\") END AS VAT_CONT_RUN_VAT_DTTM,\nTRIM(RBKP.GST_PART) AS GST_PTNR,\nTRIM(RBKP.PLC_SUP) AS PLACE_OF_SUPL,\nTRIM(RBKP.IRN) AS INVC_REF_NUM,\nTRIM(RBKP.PYBASTYP) AS TYPE_OF_PMT_BASIS_DOC,\nTRIM(RBKP.PYBASNO) AS PMT_BASIS_DOC_NUM,\nCASE WHEN RBKP.PYBASDAT = '00000000' THEN NULL ELSE to_timestamp(RBKP.PYBASDAT,\\\"yyyyMMdd\\\") END AS PMT_BASIS_DOC_DTTM,\nTRIM(RBKP.PYIBAN) AS IBAN_INTNL_BANK_ACCT_NUM,\nTRIM(RBKP.INWARDNO_HD) AS INCM_DOC_NUM,\nCASE WHEN RBKP.INWARDDT_HD = '00000000' THEN NULL ELSE to_timestamp(RBKP.INWARDDT_HD,\\\"yyyyMMdd\\\") END AS INCM_DOC_DTTM,\nTRIM(T003T.LTEXT) AS DOC_TYPE_DESC\nFROM\n  {Config.sourceDatabase}.RBKP RBKP\n  LEFT JOIN {Config.sourceDatabase}.T003T T003T on RBKP.BLART=T003T.BLART \n  and T003T.spras = 'E' and T003T._deleted_ = 'F' and T003T.MANDT = (SELECT L1_PARAMETERS.PARAM_VAL FROM CONFIG.L1_PARAMETERS L1_PARAMETERS WHERE L1_PARAMETERS.ENV_NM = '{env}' AND L1_PARAMETERS.PARAM_NM = 'mandt_filter')\nWHERE RBKP._deleted_ = 'F' and RBKP.MANDT =  (SELECT L1_PARAMETERS.PARAM_VAL FROM CONFIG.L1_PARAMETERS L1_PARAMETERS WHERE L1_PARAMETERS.ENV_NM = '{env}' AND L1_PARAMETERS.PARAM_NM = 'mandt_filter')  \n \n\"\"\")",
            "scriptMethodHeader" : "def Script(spark: SparkSession) -> DataFrame:",
            "scriptMethodFooter" : "    return out0"
          }
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      }
    }


    