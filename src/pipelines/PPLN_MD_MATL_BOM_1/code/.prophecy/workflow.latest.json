{
      "metainfo" : {
        "id" : "1",
        "language" : "python",
        "fabricId" : "32",
        "frontEndLanguage" : "sql",
        "mode" : "batch",
        "udfs" : {
          "language" : "python",
          "udfs" : [ ]
        },
        "udafs" : {
          "language" : "python",
          "code" : ""
        },
        "configuration" : {
          "common" : {
            "type" : "record",
            "fields" : [ {
              "name" : "targetSchema",
              "kind" : {
                "type" : "string",
                "value" : "l1_md_prophecy"
              },
              "optional" : false
            }, {
              "name" : "sourceSystem",
              "kind" : {
                "type" : "string",
                "value" : "bbn"
              },
              "optional" : false
            }, {
              "name" : "sourceDatabase",
              "kind" : {
                "type" : "string",
                "value" : "bbn"
              },
              "optional" : false
            } ]
          },
          "oldCommon" : {
            "type" : "record",
            "fields" : [ ]
          },
          "fabrics" : { },
          "instances" : { },
          "selected" : "default",
          "nonEditable" : [ ],
          "isSubscribedPipelineWithPipelineConfigs" : false
        },
        "sparkConf" : [ ],
        "hadoopConf" : [ ],
        "codeMode" : "sparse",
        "buildSystem" : "maven",
        "externalDependencies" : [ ],
        "isImported" : false,
        "interimMode" : "Full",
        "interimModeEnabled" : true,
        "visualCodeInterimMode" : "Disabled",
        "recordsLimit" : {
          "enabled" : false,
          "value" : 1000
        },
        "topLevelPackage" : "PPLN_MD_MATL_BOM_1"
      },
      "connections" : [ {
        "id" : "ca981a56-259c-47b5-98db-8a99abc91109",
        "source" : "60eaae0e-37f7-437b-9411-cd1a69df9a80",
        "sourcePort" : "f8349c25-2a12-4b1f-98e0-ff542e0a6a5d",
        "target" : "ee99d76e-c27f-419b-a9c2-886188ea3bca",
        "targetPort" : "49635857-07d8-4d3a-a719-550475fb62c2"
      }, {
        "id" : "e7d56d85-9609-4d48-aca4-8ebaf387c42f",
        "source" : "05095fe0-5b9b-4795-9efc-12b3b054ef26",
        "sourcePort" : "75874adf-d84f-434e-8e23-2932c8b8eecc",
        "target" : "60eaae0e-37f7-437b-9411-cd1a69df9a80",
        "targetPort" : "42c934c1-0cd2-4653-8816-605e5d60410d"
      } ],
      "processes" : {
        "ee99d76e-c27f-419b-a9c2-886188ea3bca" : {
          "id" : "ee99d76e-c27f-419b-a9c2-886188ea3bca",
          "component" : "Target",
          "metadata" : {
            "label" : "MD_MATL_BOM",
            "slug" : "MD_MATL_BOM",
            "x" : -540,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "49635857-07d8-4d3a-a719-550475fb62c2",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "datasetId" : "datasets/MD_MATL_BOM"
          }
        },
        "60eaae0e-37f7-437b-9411-cd1a69df9a80" : {
          "id" : "60eaae0e-37f7-437b-9411-cd1a69df9a80",
          "component" : "SchemaTransform",
          "metadata" : {
            "label" : "addL1fields",
            "slug" : "addL1fields",
            "x" : -780,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "42c934c1-0cd2-4653-8816-605e5d60410d",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ {
              "id" : "f8349c25-2a12-4b1f-98e0-ff542e0a6a5d",
              "slug" : "out",
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "transformations" : [ {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "SRC_SYS_CD",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'$sourceSystem'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'MATL_NUM',MATL_NUM,'PLNT_CD',PLNT_CD,'BOM_USG_CD',BOM_USG_CD,'BOM_NUM',BOM_NUM,'ALT_BOM_NUM',ALT_BOM_NUM))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_md5_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "md5(to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'MATL_NUM',MATL_NUM,'PLNT_CD',PLNT_CD,'BOM_USG_CD',BOM_USG_CD,'BOM_NUM',BOM_NUM,'ALT_BOM_NUM',ALT_BOM_NUM)))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_l1_upt_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            } ]
          }
        },
        "05095fe0-5b9b-4795-9efc-12b3b054ef26" : {
          "id" : "05095fe0-5b9b-4795-9efc-12b3b054ef26",
          "component" : "Script",
          "metadata" : {
            "label" : "sql_MD_MATL_BOM",
            "slug" : "sql_MD_MATL_BOM",
            "x" : -1060,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "75874adf-d84f-434e-8e23-2932c8b8eecc",
              "slug" : "out0",
              "schema" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "_deleted_",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  } 
                } ]
              },
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : true
          },
          "properties" : {
            "script" : "out0 = spark.sql(f\"\"\"\n     SELECT\n'{Config.sourceSystem}'   AS SRC_SYS_CD,\nmast.matnr AS MATL_NUM,\nmast.werks AS PLNT_CD,\nmast.stlan AS BOM_USG_CD,\nmast.stlnr AS BOM_NUM,\nmast.stlal AS ALT_BOM_NUM,\ncase when  mast.andat = '00000000' then null else to_timestamp(mast.andat, \\\"yyyyMMdd\\\") end as CRT_DTTM,\ncase when  mast.aedat = '00000000' then null else to_timestamp(mast.aedat, \\\"yyyyMMdd\\\") end  as CHG_DTTM,\nCAST (mast.losvn AS decimal (18,4)) as FROM_LOT_SIZE_QTY,\nCAST (mast.losbs AS decimal (18,4)) as TO_LOT_SIZE_QTY\nFROM {Config.sourceDatabase}.mast mast\nWHERE mast._deleted_ = 'F' and  mast.mandt = '100'  \n \n\"\"\")",
            "scriptMethodHeader" : "def Script(spark: SparkSession) -> DataFrame:",
            "scriptMethodFooter" : "    return out0"
          }
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      }
    }


    