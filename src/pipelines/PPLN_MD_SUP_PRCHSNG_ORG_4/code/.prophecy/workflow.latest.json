{
      "metainfo" : {
        "id" : "1",
        "language" : "python",
        "fabricId" : "32",
        "frontEndLanguage" : "sql",
        "mode" : "batch",
        "udfs" : {
          "language" : "python",
          "udfs" : [ ]
        },
        "udafs" : {
          "language" : "python",
          "code" : ""
        },
        "configuration" : {
          "common" : {
            "type" : "record",
            "fields" : [ {
              "name" : "targetSchema",
              "kind" : {
                "type" : "string",
                "value" : "l1_md_prophecy"
              },
              "optional" : false
            }, {
              "name" : "sourceSystem",
              "kind" : {
                "type" : "string",
                "value" : "bwi"
              },
              "optional" : false
            }, {
              "name" : "sourceDatabase",
              "kind" : {
                "type" : "string",
                "value" : "bwi"
              },
              "optional" : false
            } ]
          },
          "oldCommon" : {
            "type" : "record",
            "fields" : [ ]
          },
          "fabrics" : { },
          "instances" : { },
          "selected" : "default",
          "nonEditable" : [ ],
          "isSubscribedPipelineWithPipelineConfigs" : false
        },
        "sparkConf" : [ ],
        "hadoopConf" : [ ],
        "codeMode" : "sparse",
        "buildSystem" : "maven",
        "externalDependencies" : [ ],
        "isImported" : false,
        "interimMode" : "Full",
        "interimModeEnabled" : true,
        "visualCodeInterimMode" : "Disabled",
        "recordsLimit" : {
          "enabled" : false,
          "value" : 1000
        },
        "topLevelPackage" : "PPLN_MD_SUP_PRCHSNG_ORG_4"
      },
      "connections" : [ {
        "id" : "fdd83a26-903d-4dea-a213-da5ab1f6c9e4",
        "source" : "957706ee-a657-494a-857d-87394b72c513",
        "sourcePort" : "fb17cc3a-12b0-4653-bc0c-2b0d66c5be9e",
        "target" : "0c4be63b-4743-4777-8b78-afc74e0ec5fa",
        "targetPort" : "18439095-854d-4f78-b8ee-f05f806d2134"
      }, {
        "id" : "6f849c94-a516-4eb7-9cca-3808403888c9",
        "source" : "d16823bc-9acf-436a-b6cb-25e3834fa645",
        "sourcePort" : "aebd6b9c-8053-4a9d-a8c7-d126fc6fd8ef",
        "target" : "957706ee-a657-494a-857d-87394b72c513",
        "targetPort" : "0f6650cb-e7db-4a96-91e8-43b7731c8fe4"
      } ],
      "processes" : {
        "0c4be63b-4743-4777-8b78-afc74e0ec5fa" : {
          "id" : "0c4be63b-4743-4777-8b78-afc74e0ec5fa",
          "component" : "Target",
          "metadata" : {
            "label" : "MD_SUP_PRCHSNG_ORG",
            "slug" : "MD_SUP_PRCHSNG_ORG",
            "x" : -540,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "18439095-854d-4f78-b8ee-f05f806d2134",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "datasetId" : "datasets/MD_SUP_PRCHSNG_ORG"
          }
        },
        "957706ee-a657-494a-857d-87394b72c513" : {
          "id" : "957706ee-a657-494a-857d-87394b72c513",
          "component" : "SchemaTransform",
          "metadata" : {
            "label" : "addL1fields",
            "slug" : "addL1fields",
            "x" : -780,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ {
              "id" : "0f6650cb-e7db-4a96-91e8-43b7731c8fe4",
              "slug" : "in0",
              "isStreaming" : false
            } ],
            "outputs" : [ {
              "id" : "fb17cc3a-12b0-4653-bc0c-2b0d66c5be9e",
              "slug" : "out",
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : false
          },
          "properties" : {
            "columnsSelector" : [ ],
            "transformations" : [ {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "SRC_SYS_CD",
                "expression" : {
                  "format" : "sql",
                  "expression" : "'$sourceSystem'"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'SUP_NUM',SUP_NUM,'PRCHSNG_ORG_NUM',PRCHSNG_ORG_NUM))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_pk_md5_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "md5(to_json(named_struct('SRC_SYS_CD',SRC_SYS_CD,'SUP_NUM',SUP_NUM,'PRCHSNG_ORG_NUM',PRCHSNG_ORG_NUM)))"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            }, {
              "kind" : "AddReplaceColumn",
              "AddReplaceColumn" : {
                "sourceColumn" : "_l1_upt_",
                "expression" : {
                  "format" : "sql",
                  "expression" : "current_timestamp()"
                }
              },
              "DropColumn" : {
                "sourceColumn" : ""
              },
              "RenameColumn" : {
                "sourceColumn" : "",
                "targetColumn" : ""
              }
            } ]
          }
        },
        "d16823bc-9acf-436a-b6cb-25e3834fa645" : {
          "id" : "d16823bc-9acf-436a-b6cb-25e3834fa645",
          "component" : "Script",
          "metadata" : {
            "label" : "sql_MD_SUP_PRCHSNG_ORG",
            "slug" : "sql_MD_SUP_PRCHSNG_ORG",
            "x" : -1060,
            "y" : -400,
            "phase" : 0,
            "cache" : false,
            "detailedStats" : false,
            "isImported" : false
          },
          "ports" : {
            "inputs" : [ ],
            "outputs" : [ {
              "id" : "aebd6b9c-8053-4a9d-a8c7-d126fc6fd8ef",
              "slug" : "out0",
              "schema" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "_deleted_",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  } 
                } ]
              },
              "isStreaming" : false
            } ],
            "selectedInputFields" : [ ],
            "isCustomOutputSchema" : true
          },
          "properties" : {
            "script" : "out0 = spark.sql(f\"\"\"\n    SELECT\n    '{Config.sourceSystem}'   AS SRC_SYS_CD,\nLFM1.lifnr AS SUP_NUM,\nLFM1.ekorg AS PRCHSNG_ORG_NUM,\nCASE WHEN LFM1.erdat= '00000000' THEN CAST(NULL AS TIMESTAMP) ELSE TO_TIMESTAMP(LFM1.erdat,'yyyyMMdd') END AS CRT_ON_DTTM,\nTRIM(LFM1.sperm) AS PRCH_BLK_IND,\nTRIM(LFM1.loevm) AS DEL_IND,\nTRIM(LFM1.waers) AS CRNCY_CD,\nTRIM(LFM1.zterm) AS PMT_TERM_CD,\nTRIM(LFM1.inco1) AS INCOTERM1_CD,\nTRIM(LFM1.inco2) AS INCOTERM2_CD,\nTRIM(LFM1.kalsk) AS PRC_PCDR_CD,\nTRIM(LFM1.meprf) AS PRC_CNTL_CD,\nTRIM(LFM1.xersy) AS EVAL_RCPT_SETLM_CD,\nTRIM(LFM1.kzret) AS RTRN_VEND_IND,\nTRIM(LFM1.bstae) AS CNFRM_CD,\nTRIM(LFM1.ernam) AS NM_OF_PRSN_RESP_CREAT_OBJ,\nTRIM(LFM1.webre) AS GR_BAS_INVC_VERIF,\nTRIM(LFM1.kzaut) AS AUTO_GNR_OF_PO_ALLW,\nTRIM(LFM1.xersr) AS AUTO_EVAL_RCPT_SETLM,\nNULL AS OWN_EXPLN_OF_TERM_OF_PMT,\nTRIM(LFM1.vsbed) AS SHIPPING_COND_CD\nFROM {Config.sourceDatabase}.LFM1 LFM1\nWHERE LFM1._deleted_ = 'F' AND  LFM1.MANDT = 400  \n \n\"\"\")",
            "scriptMethodHeader" : "def Script(spark: SparkSession) -> DataFrame:",
            "scriptMethodFooter" : "    return out0"
          }
        }
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      }
    }


    